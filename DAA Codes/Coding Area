#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
struct node
{
    int data;
    struct node *next;
}*first=NULL;

void create (int a[],int n)
{
    struct node *t,*last;
    first=(struct node *)malloc(sizeof(struct node));
    (*first).data=a[0];
    (*first).next=NULL;
    last=first;
        for(int i=1;i<n;i++)
        {
            t=(struct node *)malloc(sizeof(struct node));
            (*t).data=a[i];
            (*t).next=NULL;
            (*last).next=t;
            last=t;
        }
}


void insert(struct node *p,int pos,int x)
{
    struct node *t;
    if(pos==0)
    {
        t=(struct node*)malloc(sizeof(struct node));
        (*t).data=x;
        (*t).next=first;
        first=t;
    }

    else if(pos>0)
    {
        p=first;
        for(int i=0;i<pos-1&&p;i++)
        {
            p=(*p).next;
        }
            if(p)
            {
                t=(struct node *)malloc(sizeof(struct node));
                (*t).data=x;
                (*t).next=(*p).next;
                (*p).next=t;
            }        
    }
}

void display(struct node *p)
{
    if(p)
    {
        printf("%d ",(*p).data);
        display((*p).next);
        
    }
    printf(" \n");
}

int sum(struct node *p)
{
    if(p)
    {
        return (sum((*p).next)+(*p).data);
            
    } 
    else
    {
        return 0;
    }
}

int count(struct node *p)
{
    if(p)
    {
        return count((*p).next)+1;
    }
}

struct node * search(struct node *p,int key)
{
    printf("searched element is = %d\n",key);
    if(!p)
    {
        printf("key not found\n");
        return NULL;
    }
    if(key==(*p).data)
    {
        printf("key is found\n");
        return p;      
    }
    else{
        search((*p).next,key);
    }    
}

void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}

int max(struct node *p)
{
    int x;
    if(p){
        x=max((*p).next);
        if(x>(*p).data)
        {
            return x;
        }
        else
        {
            return (*p).data;
        }
    }
}

void insertlast(struct node *p,int x)
{
    struct node *t,*last;
    int d=count(p);
    int c=1;
    while(c<d)
    {
        p=(*p).next;
        c++;
    }
    last=p;
    t=(struct node *)malloc(sizeof(struct node));
    (*t).data=x;
    (*t).next=NULL;
    if(first==NULL)
    {
        first=last=t;
    }
    else{
        (*last).next=t;
        t=last;
    }
}

void insertsort(struct node *p,int x)
{
    struct node *t,*q=NULL;
    t=(struct node *)malloc(sizeof(struct node));
    while(x>(*p).data)
    {
        q=p;
        p=(*p).next;
    }
    (*t).data=x;
    (*t).next=(*q).next;
    (*q).next=t;

}

void delete(struct node *p,int pos)
{
    struct node *q=NULL;
    if(pos==0)
    {
        int x=(*first).data;
        p=first;
        first=(*first).next;
        free(p);
    }
    else{
        for(int i=0;i<=pos-1;i++)
        {
            q=p;
            p=(*p).next;        
        }
        if(p)
        {
        int x=(*p).data;
        (*q).next=(*p).next;
        free(p);
        }
    }
}

void issorted(struct node *p)
{
    int flag=0;
    int x;
    x=INT_MIN;
    while(p)
    {
        if((*p).data>x)
        {
            x=(*p).data;
            p=(*p).next;
        }
        else{
            flag++;
            break;
        }
    }
        if(flag!=0)
        {
        printf("not sorted\n");}
        else
            printf("sorted\n");
}

void duplicates(struct node *p)
{
    int x;
    struct node *q;
    //p=first;
    q=(*first).next;
    while(q)
    {    
        if((*p).data!=(*q).data)
        {
            p=q;
            q=(*q).next;
        }
        else{
            (*p).next=(*q).next;
            x=(*q).data;
            free(q);
            q=(*p).next;
        }
    }
    printf("\nduplicate element is = %d \n",x);
}

void recreverse(struct node *q,struct node *p)
{
    if(p)
    {
        recreverse(p,(*p).next);
        (*p).next=q;
    }
    else{
    first=q;
    }
}

void slidereverse(struct node *p)
{
    struct node *q=NULL;
    struct node *r=NULL;
    while(p)
    {
        r=q;
        q=p;
        p=(*p).next;
        (*q).next=r;
    }
    first=q;
}

void isloop(struct node *p)
{
    struct node *q;
    p=q=first;
    do{
        p=(*p).next;
        q=(*p).next;
        q=q!=NULL?(*q).next:NULL;
    }while(p&&q);

    if(p==q)
    {
        printf("is loop\n");
    }
    else{
        printf("not loop\n");
    }
}

int middlenode(struct node *p)
{
    struct node *q=first;
    p=q=first;
    while(q)
    {
        q=(*q).next;
        if(q)
        {
            q=(*q).next;
        }
        if(q)
        {
            p=(*p).next;
        }
    }
    return (*p).data;
}

int main()
{
    int a[6]={3,4,7,15,41};
    create(a,5);
    printf("guyz middle node is = %d \n",middlenode(first));
    // struct node *t1,*t2;
    // t2=first->next->next->next->next;
    // t1=(*first).next;
    // (*t2).next=t1;
    // isloop(first);
    //duplicates(first);
    //slidereverse(first);
    //recreverse(NULL,first);
    //issorted(first);
    //delete(first,0);
    //insert(first,0,1001);
    //insert(first,3,1000);                //NAHI HUA
    //insertlast(first,20);             //NAHI HUA
    //insertsort(first,7);
    // printf("max = %d\n",max(first));
    // printf("sum= %d\n ",sum(first));
    // printf("count = %d \n",count(first));
    // search(first,6);
    // search(first,7);
    display(first);

    return 0;
}








